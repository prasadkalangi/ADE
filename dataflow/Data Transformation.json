{
	"name": "Data Transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_silver_source",
						"type": "DatasetReference"
					},
					"name": "DimAirline"
				},
				{
					"dataset": {
						"referenceName": "ds_dimflight_source",
						"type": "DatasetReference"
					},
					"name": "DimFlight"
				},
				{
					"dataset": {
						"referenceName": "ds_dimpassenger_source",
						"type": "DatasetReference"
					},
					"name": "DimPassenger"
				},
				{
					"dataset": {
						"referenceName": "ds_factbooking_source",
						"type": "DatasetReference"
					},
					"name": "FactBooking"
				},
				{
					"dataset": {
						"referenceName": "ds_dimairport_source",
						"type": "DatasetReference"
					},
					"name": "DimAirport"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkDimFlight"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkDimAirline",
					"rejectedDataLinkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink2",
					"rejectedDataLinkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink3",
					"rejectedDataLinkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "DerivedColCountry"
				},
				{
					"name": "SelectCols"
				},
				{
					"name": "select1"
				},
				{
					"name": "DerivedGenderFlagMale"
				},
				{
					"name": "DerivedGenderFlagFemale"
				},
				{
					"name": "filterGreater25"
				},
				{
					"name": "DerivedName"
				},
				{
					"name": "CastCost"
				},
				{
					"name": "DerivedAirportNames"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "alterRow4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as short,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimAirline",
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_time as string,",
				"          arrival_time as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimFlight",
				"source(output(",
				"          passenger_id as short,",
				"          full_name as string,",
				"          gender as string,",
				"          age as short,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimPassenger",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as decimal(10,2),",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> FactBooking",
				"source(output(",
				"          airport_id as short,",
				"          airport_name as string,",
				"          city as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> DimAirport",
				"DimAirline derive(country = upper(country)) ~> DerivedColCountry",
				"DimFlight select(mapColumn(",
				"          flight_id,",
				"          flight_number,",
				"          departure_timestamp = departure_time,",
				"          arrival_timestamp = arrival_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCols",
				"DimPassenger select(mapColumn(",
				"          passenger_id,",
				"          full_name,",
				"          age,",
				"          gender_flag = gender,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(gender_flag = regexReplace(gender_flag, 'M', 'MALE')) ~> DerivedGenderFlagMale",
				"DerivedGenderFlagMale derive(gender_flag = regexReplace(gender_flag, 'F', 'FEMALE')) ~> DerivedGenderFlagFemale",
				"DerivedGenderFlagFemale filter(age>25 &&country != 'Mexico') ~> filterGreater25",
				"filterGreater25 derive(First_name = split(full_name, ' ')[1],",
				"          Second_Name = split(full_name, ' ')[2]) ~> DerivedName",
				"FactBooking cast(output(",
				"          ticket_cost as integer",
				"     ),",
				"     errors: true) ~> CastCost",
				"DimAirport derive(airport_name = upper(airport_name)) ~> DerivedAirportNames",
				"DerivedColCountry alterRow(upsertIf(1==1)) ~> alterRow1",
				"SelectCols alterRow(updateIf(1==1)) ~> alterRow",
				"DerivedAirportNames alterRow(upsertIf(1==1)) ~> alterRow2",
				"CastCost alterRow(upsertIf(1==1)) ~> alterRow3",
				"DerivedName alterRow(upsertIf(1==1)) ~> alterRow4",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimFlight',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['flight_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDimFlight",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirlines',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airline_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDimAirline",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAiport',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airport_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'FactBooking',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['booking_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"alterRow4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimPassenger',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['passenger_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}